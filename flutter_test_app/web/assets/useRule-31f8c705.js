const _={password(r){return/^(?![a-zA-Z]+$)(?![A-Z0-9]+$)(?![A-Z\W_]+$)(?![a-z0-9]+$)(?![a-z\W_]+$)(?![0-9\W_]+$)[a-zA-Z0-9\W_][^\u4e00-\u9fa5]{7,29}$/.test(r)}},m={empty(r="不能为空"){return{required:!0,message:r,trigger:"change"}},email(){return{required:!0,type:"email",message:"请输入正确邮箱",trigger:"change"}},url(){return{required:!0,type:"url",message:"请输入链接地址",trigger:"change"}},phone(r=""){function n(e,t,i){t?/^\d{7,11}$/.test(t)?i():i(new Error("请输入正确的手机号")):r?i(new Error(r)):i()}return{required:!!r,validator:n,trigger:"change"}},password(r=""){function n(e,t,i){t?_.password(t)?i():i(new Error("密码格式：数字小写字母大写字母特殊符号任选其三长度8-30位")):r?i(new Error(r)):i()}return{required:!!r,validator:n,trigger:"change"}},passwordConfirm(r,n="不能为空"){return{required:!0,validator:(e,t,i)=>{t?t===r()?i():i(new Error("两次密码输入不一致")):i(new Error(n))},trigger:"change"}},gt(){function r(n,e,t){d(["gt"],e,t)}return{validator:r,trigger:"change"}},gte(){function r(n,e,t){d(["gte"],e,t)}return{validator:r,trigger:"change"}},gteint(){function r(n,e,t){d(["gte","int"],e,t)}return{validator:r,trigger:"change"}},gtint(){function r(n,e,t){d(["gt","int"],e,t)}return{validator:r,trigger:"change"}},intnum(){function r(n,e,t){d(["int"],e,t)}return{validator:r,trigger:"change"}},decimal:p};function d(r,n,e){if(n==null||n===""){e();return}n=String(n);const t=!!n.match(/^(\\-)?\d+(?:\.\d+)?$/);if(n&&!t)return e(new Error("请输入有效数字"));if(r.includes("rq")&&!t)return e(new Error("请输入有效数字"));if(r.includes("int")&&!n.match(/^(\\-)?\d+$/g))return e(new Error("请输入有效的整数"));if(n=parseFloat(n),r.includes("gt")&&n<=0)return e(new Error("请输入大于0的数字"));if(r.includes("gte")&&n<0)return e(new Error("请输入≥0的数字"));e()}function p(r=0,n){function e(E,g,o){return g==null||g===""||String(g).match(new RegExp("^(\\-)?\\d{1,13}(?:\\.\\d{1,"+r+"})?$"))?o():o(new Error(`請輸入有效的數字，最多保留${r}位小數`))}function t(E,g,o){if(g==null||g==="")return o();const s=parseFloat(g),u=n[0],f=n[1],h=n[2],$=h?"等于":"";if(h){if(s>=u&&s<=f)return o()}else if(s>u&&s<f)return o();return f==1/0&&u>-1/0?o(new Error(`請輸入大於${$} ${u} 的數字`)):f<1/0&&u==-1/0?o(new Error(`請輸入小於${$} ${f} 的數字`)):o(new Error(`請輸入 ${u} - ${f} 之間的數字`))}let i=[];r>0?i=[{validator:e,trigger:"change"}]:r==0&&(i=[{validator:m.intnum,trigger:"change"}]);let w=[];return n&&(w=[{validator:t,trigger:"change"}]),i.concat(w)}export{m as u};
